/* automatically generated by rust-bindgen 0.59.1 */

pub const NISYNC_MAJOR_VERSION: i32 = 23;
pub const NISYNC_MINOR_VERSION: i32 = 8;
pub const NISYNC_ATTR_BASE: i32 = 1150000;
pub const NISYNC_ATTR_INTF_NUM: i32 = 1150000;
pub const NISYNC_ATTR_SERIAL_NUM: i32 = 1150001;
pub const NISYNC_ATTR_PFI0_THRESHOLD: i32 = 1150100;
pub const NISYNC_ATTR_PFI1_THRESHOLD: i32 = 1150101;
pub const NISYNC_ATTR_PFI2_THRESHOLD: i32 = 1150102;
pub const NISYNC_ATTR_PFI3_THRESHOLD: i32 = 1150103;
pub const NISYNC_ATTR_PFI4_THRESHOLD: i32 = 1150104;
pub const NISYNC_ATTR_PFI5_THRESHOLD: i32 = 1150105;
pub const NISYNC_ATTR_OSCILLATOR_VOLTAGE: i32 = 1150106;
pub const NISYNC_ATTR_CLK10_PHASE_ADJUST: i32 = 1150107;
pub const NISYNC_ATTR_DDS_VCXO_VOLTAGE: i32 = 1150108;
pub const NISYNC_ATTR_DDS_PHASE_ADJUST: i32 = 1150109;
pub const NISYNC_ATTR_PFI0_1KOHM_ENABLE: i32 = 1150110;
pub const NISYNC_ATTR_PFI1_1KOHM_ENABLE: i32 = 1150111;
pub const NISYNC_ATTR_PFI2_1KOHM_ENABLE: i32 = 1150112;
pub const NISYNC_ATTR_PFI3_1KOHM_ENABLE: i32 = 1150113;
pub const NISYNC_ATTR_PFI4_1KOHM_ENABLE: i32 = 1150114;
pub const NISYNC_ATTR_PFI5_1KOHM_ENABLE: i32 = 1150115;
pub const NISYNC_ATTR_PFI0_10KOHM_ENABLE: i32 = 1150116;
pub const NISYNC_ATTR_PFI1_10KOHM_ENABLE: i32 = 1150117;
pub const NISYNC_ATTR_PFI2_10KOHM_ENABLE: i32 = 1150118;
pub const NISYNC_ATTR_PFI3_10KOHM_ENABLE: i32 = 1150119;
pub const NISYNC_ATTR_PFI4_10KOHM_ENABLE: i32 = 1150120;
pub const NISYNC_ATTR_PFI5_10KOHM_ENABLE: i32 = 1150121;
pub const NISYNC_ATTR_FRONT_SYNC_CLK_SRC: i32 = 1150200;
pub const NISYNC_ATTR_REAR_SYNC_CLK_SRC: i32 = 1150201;
pub const NISYNC_ATTR_SYNC_CLK_DIV1: i32 = 1150202;
pub const NISYNC_ATTR_SYNC_CLK_DIV2: i32 = 1150203;
pub const NISYNC_ATTR_SYNC_CLK_RST_PXITRIG_NUM: i32 = 1150204;
pub const NISYNC_ATTR_SYNC_CLK_PFI0_FREQ: i32 = 1150205;
pub const NISYNC_ATTR_SYNC_CLK_RST_DDS_CNTR_ON_PXITRIG: i32 = 1150206;
pub const NISYNC_ATTR_SYNC_CLK_RST_PFI0_CNTR_ON_PXITRIG: i32 = 1150207;
pub const NISYNC_ATTR_SYNC_CLK_RST_CLK10_CNTR_ON_PXITRIG: i32 = 1150208;
pub const NISYNC_ATTR_TERMINAL_STATE_PXISTAR: i32 = 1150300;
pub const NISYNC_ATTR_TERMINAL_STATE_PXITRIG: i32 = 1150301;
pub const NISYNC_ATTR_TERMINAL_STATE_PFI: i32 = 1150302;
pub const NISYNC_ATTR_TERMINAL_STATE_PXIEDSTARC: i32 = 1150303;
pub const NISYNC_ATTR_TERMINAL_STATE_PFILVDS: i32 = 1150304;
pub const NISYNC_ATTR_TERMINAL_STATE_PXIEDSTARCPERIPHERAL: i32 = 1150305;
pub const NISYNC_ATTR_TERMINAL_STATE_PXIEDSTARBPERIPHERAL: i32 = 1150306;
pub const NISYNC_ATTR_TERMINAL_STATE_PXISTARPERIPHERAL: i32 = 1150307;
pub const NISYNC_ATTR_DDS_FREQ: i32 = 1150400;
pub const NISYNC_ATTR_DDS_UPDATE_SOURCE: i32 = 1150401;
pub const NISYNC_ATTR_DDS_INITIAL_DELAY: i32 = 1150402;
pub const NISYNC_ATTR_CLKIN_PLL_FREQ: i32 = 1150500;
pub const NISYNC_ATTR_CLKIN_USE_PLL: i32 = 1150501;
pub const NISYNC_ATTR_CLKIN_PLL_LOCKED: i32 = 1150502;
pub const NISYNC_ATTR_CLKOUT_GAIN_ENABLE: i32 = 1150503;
pub const NISYNC_ATTR_PXICLK10_PRESENT: i32 = 1150504;
pub const NISYNC_ATTR_CLKIN_ATTENUATION_DISABLE: i32 = 1150505;
pub const NISYNC_ATTR_USER_LED_STATE: i32 = 1150600;
pub const NISYNC_ATTR_1588_IP_ADDRESS: i32 = 1150700;
pub const NISYNC_ATTR_1588_CLOCK_STATE: i32 = 1150712;
pub const NISYNC_ATTR_1588_TIMESTAMP_BUF_SIZE: i32 = 1150718;
pub const NISYNC_ATTR_1588_AVAIL_TIMESTAMPS: i32 = 1150719;
pub const NISYNC_ATTR_1588_CLK_RESOLUTION: i32 = 1150720;
pub const NISYNC_ATTR_1588_CLOCK_ID: i32 = 1150729;
pub const NISYNC_ATTR_1588_CLOCK_CLASS: i32 = 1150730;
pub const NISYNC_ATTR_1588_CLOCK_ACCURACY: i32 = 1150731;
pub const NISYNC_ATTR_1588_PRIORITY1: i32 = 1150732;
pub const NISYNC_ATTR_1588_PRIORITY2: i32 = 1150733;
pub const NISYNC_ATTR_1588_GRANDMASTER_CLOCK_ID: i32 = 1150734;
pub const NISYNC_ATTR_1588_GRANDMASTER_CLOCK_CLASS: i32 = 1150735;
pub const NISYNC_ATTR_1588_GRANDMASTER_CLOCK_ACCURACY: i32 = 1150736;
pub const NISYNC_ATTR_1588_GRANDMASTER_PRIORITY1: i32 = 1150737;
pub const NISYNC_ATTR_1588_GRANDMASTER_PRIORITY2: i32 = 1150738;
pub const NISYNC_ATTR_1588_STEPS_TO_GRANDMASTER: i32 = 1150716;
pub const NISYNC_ATTR_1588_LOG_SYNC_INTERVAL: i32 = 1150739;
pub const NISYNC_ATTR_1588_MEAN_PATH_DELAY: i32 = 1150740;
pub const NISYNC_ATTR_1588_GRANDMASTER_IP_ADDRESS: i32 = 1150741;
pub const NISYNC_ATTR_1588_BMCA_MODE: i32 = 1150742;
pub const NISYNC_ATTR_1588_INTERFACE_NAME: i32 = 1150743;
pub const NISYNC_ATTR_1588_OFFSET_SCALED_LOG_VARIANCE: i32 = 1150752;
pub const NISYNC_ATTR_1588_LEAP59: i32 = 1150763;
pub const NISYNC_ATTR_1588_LEAP61: i32 = 1150764;
pub const NISYNC_ATTR_1588_TIME_TRACEABLE: i32 = 1150765;
pub const NISYNC_ATTR_1588_FREQUENCY_TRACEABLE: i32 = 1150766;
pub const NISYNC_ATTR_1588_TIME_SOURCE: i32 = 1150768;
pub const NISYNC_ATTR_TIMEREF_PRESENT: i32 = 1150800;
pub const NISYNC_ATTR_TIMEREF_OFFSET: i32 = 1150802;
pub const NISYNC_ATTR_TIMEREF_OFFSET_NS: i32 = 1150808;
pub const NISYNC_ATTR_TIMEREF_CORRECTION: i32 = 1150804;
pub const NISYNC_ATTR_TIMEREF_UTC_OFFSET: i32 = 1150805;
pub const NISYNC_ATTR_TIMEREF_UTC_OFFSET_VALID: i32 = 1150806;
pub const NISYNC_ATTR_TIMEREF_LAST_SYNC_ID: i32 = 1150807;
pub const NISYNC_ATTR_TIMEREF_SELECTED_TYPE: i32 = 1150809;
pub const NISYNC_ATTR_TIMEREF_TYPE: i32 = 1150810;
pub const NISYNC_ATTR_TIMEREF_SELECTED_NAME: i32 = 1150811;
pub const NISYNC_ATTR_TIMEREF_ENABLED: i32 = 1150812;
pub const NISYNC_ATTR_TIMEREF_IS_SELECTED: i32 = 1150813;
pub const NISYNC_ATTR_GPS_ANTENNA_CONNECTED: i32 = 1150900;
pub const NISYNC_ATTR_GPS_RECALCULATE_POSITION: i32 = 1150901;
pub const NISYNC_ATTR_GPS_SATELLITES_AVAILABLE: i32 = 1150902;
pub const NISYNC_ATTR_GPS_SELF_SURVEY: i32 = 1150903;
pub const NISYNC_ATTR_GPS_MOBILE_MODE: i32 = 1150904;
pub const NISYNC_ATTR_GPS_STATUS: i32 = 1150905;
pub const NISYNC_ATTR_TIMEREF_CURRENT: i32 = 1150801;
pub const NISYNC_ATTR_TIMEREF_CLK_ADJ_OFFSET: i32 = 1150803;
pub const NISYNC_ATTR_GPS_UTC_OFFSET: i32 = 1150906;
pub const NISYNC_ATTR_IRIG_TAI_OFFSET: i32 = 1151000;
pub const NISYNC_ATTR_8021AS_PORT_STATE: i32 = 1151100;
pub const NISYNC_ATTR_8021AS_CLOCK_ID: i32 = 1151101;
pub const NISYNC_ATTR_8021AS_CLOCK_CLASS: i32 = 1151102;
pub const NISYNC_ATTR_8021AS_CLOCK_ACCURACY: i32 = 1151103;
pub const NISYNC_ATTR_8021AS_PRIORITY1: i32 = 1151104;
pub const NISYNC_ATTR_8021AS_PRIORITY2: i32 = 1151105;
pub const NISYNC_ATTR_8021AS_GRANDMASTER_CLOCK_ID: i32 = 1151106;
pub const NISYNC_ATTR_8021AS_GRANDMASTER_CLOCK_CLASS: i32 = 1151107;
pub const NISYNC_ATTR_8021AS_GRANDMASTER_CLOCK_ACCURACY: i32 = 1151108;
pub const NISYNC_ATTR_8021AS_GRANDMASTER_PRIORITY1: i32 = 1151109;
pub const NISYNC_ATTR_8021AS_GRANDMASTER_PRIORITY2: i32 = 1151110;
pub const NISYNC_ATTR_8021AS_LOG_SYNC_INTERVAL: i32 = 1151111;
pub const NISYNC_ATTR_8021AS_LOG_ANNOUNCE_INTERVAL: i32 = 1151112;
pub const NISYNC_ATTR_8021AS_INTERFACE_NAME: i32 = 1151113;
pub const NISYNC_ATTR_8021AS_NEIGHBOR_PROP_DELAY_THRESH: i32 = 1151114;
pub const NISYNC_ATTR_8021AS_AS_CAPABLE: i32 = 1151115;
pub const NISYNC_VAL_PXITRIG0: &'static [u8; 10usize] = b"PXI_Trig0\0";
pub const NISYNC_VAL_PXITRIG1: &'static [u8; 10usize] = b"PXI_Trig1\0";
pub const NISYNC_VAL_PXITRIG2: &'static [u8; 10usize] = b"PXI_Trig2\0";
pub const NISYNC_VAL_PXITRIG3: &'static [u8; 10usize] = b"PXI_Trig3\0";
pub const NISYNC_VAL_PXITRIG4: &'static [u8; 10usize] = b"PXI_Trig4\0";
pub const NISYNC_VAL_PXITRIG5: &'static [u8; 10usize] = b"PXI_Trig5\0";
pub const NISYNC_VAL_PXITRIG6: &'static [u8; 10usize] = b"PXI_Trig6\0";
pub const NISYNC_VAL_PXITRIG7: &'static [u8; 10usize] = b"PXI_Trig7\0";
pub const NISYNC_VAL_PXISTAR0: &'static [u8; 10usize] = b"PXI_Star0\0";
pub const NISYNC_VAL_PXISTAR1: &'static [u8; 10usize] = b"PXI_Star1\0";
pub const NISYNC_VAL_PXISTAR2: &'static [u8; 10usize] = b"PXI_Star2\0";
pub const NISYNC_VAL_PXISTAR3: &'static [u8; 10usize] = b"PXI_Star3\0";
pub const NISYNC_VAL_PXISTAR4: &'static [u8; 10usize] = b"PXI_Star4\0";
pub const NISYNC_VAL_PXISTAR5: &'static [u8; 10usize] = b"PXI_Star5\0";
pub const NISYNC_VAL_PXISTAR6: &'static [u8; 10usize] = b"PXI_Star6\0";
pub const NISYNC_VAL_PXISTAR7: &'static [u8; 10usize] = b"PXI_Star7\0";
pub const NISYNC_VAL_PXISTAR8: &'static [u8; 10usize] = b"PXI_Star8\0";
pub const NISYNC_VAL_PXISTAR9: &'static [u8; 10usize] = b"PXI_Star9\0";
pub const NISYNC_VAL_PXISTAR10: &'static [u8; 11usize] = b"PXI_Star10\0";
pub const NISYNC_VAL_PXISTAR11: &'static [u8; 11usize] = b"PXI_Star11\0";
pub const NISYNC_VAL_PXISTAR12: &'static [u8; 11usize] = b"PXI_Star12\0";
pub const NISYNC_VAL_PXISTAR13: &'static [u8; 11usize] = b"PXI_Star13\0";
pub const NISYNC_VAL_PXISTAR14: &'static [u8; 11usize] = b"PXI_Star14\0";
pub const NISYNC_VAL_PXISTAR15: &'static [u8; 11usize] = b"PXI_Star15\0";
pub const NISYNC_VAL_PXISTAR16: &'static [u8; 11usize] = b"PXI_Star16\0";
pub const NISYNC_VAL_PXISTAR: &'static [u8; 9usize] = b"PXI_Star\0";
pub const NISYNC_VAL_PXIEDSTARA0: &'static [u8; 13usize] = b"PXIe_DStarA0\0";
pub const NISYNC_VAL_PXIEDSTARA1: &'static [u8; 13usize] = b"PXIe_DStarA1\0";
pub const NISYNC_VAL_PXIEDSTARA2: &'static [u8; 13usize] = b"PXIe_DStarA2\0";
pub const NISYNC_VAL_PXIEDSTARA3: &'static [u8; 13usize] = b"PXIe_DStarA3\0";
pub const NISYNC_VAL_PXIEDSTARA4: &'static [u8; 13usize] = b"PXIe_DStarA4\0";
pub const NISYNC_VAL_PXIEDSTARA5: &'static [u8; 13usize] = b"PXIe_DStarA5\0";
pub const NISYNC_VAL_PXIEDSTARA6: &'static [u8; 13usize] = b"PXIe_DStarA6\0";
pub const NISYNC_VAL_PXIEDSTARA7: &'static [u8; 13usize] = b"PXIe_DStarA7\0";
pub const NISYNC_VAL_PXIEDSTARA8: &'static [u8; 13usize] = b"PXIe_DStarA8\0";
pub const NISYNC_VAL_PXIEDSTARA9: &'static [u8; 13usize] = b"PXIe_DStarA9\0";
pub const NISYNC_VAL_PXIEDSTARA10: &'static [u8; 14usize] = b"PXIe_DStarA10\0";
pub const NISYNC_VAL_PXIEDSTARA11: &'static [u8; 14usize] = b"PXIe_DStarA11\0";
pub const NISYNC_VAL_PXIEDSTARA12: &'static [u8; 14usize] = b"PXIe_DStarA12\0";
pub const NISYNC_VAL_PXIEDSTARA13: &'static [u8; 14usize] = b"PXIe_DStarA13\0";
pub const NISYNC_VAL_PXIEDSTARA14: &'static [u8; 14usize] = b"PXIe_DStarA14\0";
pub const NISYNC_VAL_PXIEDSTARA15: &'static [u8; 14usize] = b"PXIe_DStarA15\0";
pub const NISYNC_VAL_PXIEDSTARA16: &'static [u8; 14usize] = b"PXIe_DStarA16\0";
pub const NISYNC_VAL_PXIEDSTARA: &'static [u8; 12usize] = b"PXIe_DStarA\0";
pub const NISYNC_VAL_PXIEDSTARB0: &'static [u8; 13usize] = b"PXIe_DStarB0\0";
pub const NISYNC_VAL_PXIEDSTARB1: &'static [u8; 13usize] = b"PXIe_DStarB1\0";
pub const NISYNC_VAL_PXIEDSTARB2: &'static [u8; 13usize] = b"PXIe_DStarB2\0";
pub const NISYNC_VAL_PXIEDSTARB3: &'static [u8; 13usize] = b"PXIe_DStarB3\0";
pub const NISYNC_VAL_PXIEDSTARB4: &'static [u8; 13usize] = b"PXIe_DStarB4\0";
pub const NISYNC_VAL_PXIEDSTARB5: &'static [u8; 13usize] = b"PXIe_DStarB5\0";
pub const NISYNC_VAL_PXIEDSTARB6: &'static [u8; 13usize] = b"PXIe_DStarB6\0";
pub const NISYNC_VAL_PXIEDSTARB7: &'static [u8; 13usize] = b"PXIe_DStarB7\0";
pub const NISYNC_VAL_PXIEDSTARB8: &'static [u8; 13usize] = b"PXIe_DStarB8\0";
pub const NISYNC_VAL_PXIEDSTARB9: &'static [u8; 13usize] = b"PXIe_DStarB9\0";
pub const NISYNC_VAL_PXIEDSTARB10: &'static [u8; 14usize] = b"PXIe_DStarB10\0";
pub const NISYNC_VAL_PXIEDSTARB11: &'static [u8; 14usize] = b"PXIe_DStarB11\0";
pub const NISYNC_VAL_PXIEDSTARB12: &'static [u8; 14usize] = b"PXIe_DStarB12\0";
pub const NISYNC_VAL_PXIEDSTARB13: &'static [u8; 14usize] = b"PXIe_DStarB13\0";
pub const NISYNC_VAL_PXIEDSTARB14: &'static [u8; 14usize] = b"PXIe_DStarB14\0";
pub const NISYNC_VAL_PXIEDSTARB15: &'static [u8; 14usize] = b"PXIe_DStarB15\0";
pub const NISYNC_VAL_PXIEDSTARB16: &'static [u8; 14usize] = b"PXIe_DStarB16\0";
pub const NISYNC_VAL_PXIEDSTARB: &'static [u8; 12usize] = b"PXIe_DStarB\0";
pub const NISYNC_VAL_PXIEDSTARC0: &'static [u8; 13usize] = b"PXIe_DStarC0\0";
pub const NISYNC_VAL_PXIEDSTARC1: &'static [u8; 13usize] = b"PXIe_DStarC1\0";
pub const NISYNC_VAL_PXIEDSTARC2: &'static [u8; 13usize] = b"PXIe_DStarC2\0";
pub const NISYNC_VAL_PXIEDSTARC3: &'static [u8; 13usize] = b"PXIe_DStarC3\0";
pub const NISYNC_VAL_PXIEDSTARC4: &'static [u8; 13usize] = b"PXIe_DStarC4\0";
pub const NISYNC_VAL_PXIEDSTARC5: &'static [u8; 13usize] = b"PXIe_DStarC5\0";
pub const NISYNC_VAL_PXIEDSTARC6: &'static [u8; 13usize] = b"PXIe_DStarC6\0";
pub const NISYNC_VAL_PXIEDSTARC7: &'static [u8; 13usize] = b"PXIe_DStarC7\0";
pub const NISYNC_VAL_PXIEDSTARC8: &'static [u8; 13usize] = b"PXIe_DStarC8\0";
pub const NISYNC_VAL_PXIEDSTARC9: &'static [u8; 13usize] = b"PXIe_DStarC9\0";
pub const NISYNC_VAL_PXIEDSTARC10: &'static [u8; 14usize] = b"PXIe_DStarC10\0";
pub const NISYNC_VAL_PXIEDSTARC11: &'static [u8; 14usize] = b"PXIe_DStarC11\0";
pub const NISYNC_VAL_PXIEDSTARC12: &'static [u8; 14usize] = b"PXIe_DStarC12\0";
pub const NISYNC_VAL_PXIEDSTARC13: &'static [u8; 14usize] = b"PXIe_DStarC13\0";
pub const NISYNC_VAL_PXIEDSTARC14: &'static [u8; 14usize] = b"PXIe_DStarC14\0";
pub const NISYNC_VAL_PXIEDSTARC15: &'static [u8; 14usize] = b"PXIe_DStarC15\0";
pub const NISYNC_VAL_PXIEDSTARC16: &'static [u8; 14usize] = b"PXIe_DStarC16\0";
pub const NISYNC_VAL_PXIEDSTARC: &'static [u8; 12usize] = b"PXIe_DStarC\0";
pub const NISYNC_VAL_PFILVDS0: &'static [u8; 10usize] = b"PFI_LVDS0\0";
pub const NISYNC_VAL_PFILVDS1: &'static [u8; 10usize] = b"PFI_LVDS1\0";
pub const NISYNC_VAL_PFILVDS2: &'static [u8; 10usize] = b"PFI_LVDS2\0";
pub const NISYNC_VAL_PFI0: &'static [u8; 5usize] = b"PFI0\0";
pub const NISYNC_VAL_PFI1: &'static [u8; 5usize] = b"PFI1\0";
pub const NISYNC_VAL_PFI2: &'static [u8; 5usize] = b"PFI2\0";
pub const NISYNC_VAL_PFI3: &'static [u8; 5usize] = b"PFI3\0";
pub const NISYNC_VAL_PFI4: &'static [u8; 5usize] = b"PFI4\0";
pub const NISYNC_VAL_PFI5: &'static [u8; 5usize] = b"PFI5\0";
pub const NISYNC_VAL_GND: &'static [u8; 7usize] = b"Ground\0";
pub const NISYNC_VAL_SYNC_CLK_FULLSPEED: &'static [u8; 17usize] = b"SyncClkFullSpeed\0";
pub const NISYNC_VAL_SYNC_CLK_DIV1: &'static [u8; 16usize] = b"SyncClkDivided1\0";
pub const NISYNC_VAL_SYNC_CLK_DIV2: &'static [u8; 16usize] = b"SyncClkDivided2\0";
pub const NISYNC_VAL_SYNC_CLK_ASYNC: &'static [u8; 13usize] = b"SyncClkAsync\0";
pub const NISYNC_VAL_SWTRIG_GLOBAL: &'static [u8; 22usize] = b"GlobalSoftwareTrigger\0";
pub const NISYNC_VAL_CLK10: &'static [u8; 10usize] = b"PXI_Clk10\0";
pub const NISYNC_VAL_CLK10_IN: &'static [u8; 13usize] = b"PXI_Clk10_In\0";
pub const NISYNC_VAL_CLKIN: &'static [u8; 6usize] = b"ClkIn\0";
pub const NISYNC_VAL_CLKOUT: &'static [u8; 7usize] = b"ClkOut\0";
pub const NISYNC_VAL_OSCILLATOR: &'static [u8; 11usize] = b"Oscillator\0";
pub const NISYNC_VAL_DDS: &'static [u8; 4usize] = b"DDS\0";
pub const NISYNC_VAL_CLK100: &'static [u8; 12usize] = b"PXIe_Clk100\0";
pub const NISYNC_VAL_ALL_CONNECTED: &'static [u8; 13usize] = b"AllConnected\0";
pub const NISYNC_VAL_DONT_INVERT: i32 = 0;
pub const NISYNC_VAL_INVERT: i32 = 1;
pub const NISYNC_VAL_UPDATE_EDGE_RISING: i32 = 0;
pub const NISYNC_VAL_UPDATE_EDGE_FALLING: i32 = 1;
pub const NISYNC_VAL_DDS_UPDATE_IMMEDIATE: &'static [u8; 20usize] = b"DDS_UpdateImmediate\0";
pub const NISYNC_VAL_RTSI0: &'static [u8; 6usize] = b"RTSI0\0";
pub const NISYNC_VAL_RTSI1: &'static [u8; 6usize] = b"RTSI1\0";
pub const NISYNC_VAL_RTSI2: &'static [u8; 6usize] = b"RTSI2\0";
pub const NISYNC_VAL_RTSI3: &'static [u8; 6usize] = b"RTSI3\0";
pub const NISYNC_VAL_RTSI4: &'static [u8; 6usize] = b"RTSI4\0";
pub const NISYNC_VAL_RTSI5: &'static [u8; 6usize] = b"RTSI5\0";
pub const NISYNC_VAL_RTSI6: &'static [u8; 6usize] = b"RTSI6\0";
pub const NISYNC_VAL_RTSI7: &'static [u8; 6usize] = b"RTSI7\0";
pub const NISYNC_VAL_BOARD_CLK: &'static [u8; 9usize] = b"BoardClk\0";
pub const NISYNC_VAL_INIT_TIME_SRC_SYSTEM_CLK: i32 = 0;
pub const NISYNC_VAL_INIT_TIME_SRC_MANUAL: i32 = 1;
pub const NISYNC_VAL_LEVEL_LOW: i32 = 0;
pub const NISYNC_VAL_LEVEL_HIGH: i32 = 1;
pub const NISYNC_VAL_EDGE_RISING: i32 = 0;
pub const NISYNC_VAL_EDGE_FALLING: i32 = 1;
pub const NISYNC_VAL_EDGE_ANY: i32 = 2;
pub const NISYNC_VAL_1588_CLK_STATE_NOT_DEFINED: i32 = -1;
pub const NISYNC_VAL_1588_CLK_STATE_INIT: i32 = 0;
pub const NISYNC_VAL_1588_CLK_STATE_FAULT: i32 = 1;
pub const NISYNC_VAL_1588_CLK_STATE_DISABLE: i32 = 2;
pub const NISYNC_VAL_1588_CLK_STATE_LISTENING: i32 = 3;
pub const NISYNC_VAL_1588_CLK_STATE_PREMASTER: i32 = 4;
pub const NISYNC_VAL_1588_CLK_STATE_MASTER: i32 = 5;
pub const NISYNC_VAL_1588_CLK_STATE_PASSIVE: i32 = 6;
pub const NISYNC_VAL_1588_CLK_STATE_UNCALIBRATED: i32 = 7;
pub const NISYNC_VAL_1588_CLK_STATE_SLAVE: i32 = 8;
pub const NISYNC_VAL_1588_CLK_STATE_STOPPED: i32 = 9;
pub const NISYNC_VAL_1588_CLK_CLASS_DEFAULT: i32 = 248;
pub const NISYNC_VAL_SYNC_INTERVAL_125_MSEC: i32 = -3;
pub const NISYNC_VAL_SYNC_INTERVAL_250_MSEC: i32 = -2;
pub const NISYNC_VAL_SYNC_INTERVAL_HALF_SEC: i32 = -1;
pub const NISYNC_VAL_SYNC_INTERVAL_ONE_SEC: i32 = 0;
pub const NISYNC_VAL_SYNC_INTERVAL_TWO_SEC: i32 = 1;
pub const NISYNC_VAL_1588_CLK_ACCURACY_UNKNOWN: i32 = 0;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_25_NSEC: i32 = 1;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_100_NSEC: i32 = 2;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_250_NSEC: i32 = 3;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_1_USEC: i32 = 4;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_2500_NSEC: i32 = 5;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_10_USEC: i32 = 6;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_25_USEC: i32 = 7;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_100_USEC: i32 = 8;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_250_USEC: i32 = 9;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_1_MSEC: i32 = 10;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_2500_USEC: i32 = 11;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_10_MSEC: i32 = 12;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_25_MSEC: i32 = 13;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_100_MSEC: i32 = 14;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_250_MSEC: i32 = 15;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_1_SEC: i32 = 16;
pub const NISYNC_VAL_1588_CLK_ACCURACY_WITHIN_10_SEC: i32 = 17;
pub const NISYNC_VAL_1588_CLK_ACCURACY_GREATER_THAN_10_SEC: i32 = 18;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_UNKNOWN: i32 = 254;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_25_NSEC: i32 = 32;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_100_NSEC: i32 = 33;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_250_NSEC: i32 = 34;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_1_USEC: i32 = 35;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_2500_NSEC: i32 = 36;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_10_USEC: i32 = 37;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_25_USEC: i32 = 38;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_100_USEC: i32 = 39;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_250_USEC: i32 = 40;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_1_MSEC: i32 = 41;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_2500_USEC: i32 = 42;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_10_MSEC: i32 = 43;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_25_MSEC: i32 = 44;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_100_MSEC: i32 = 45;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_250_MSEC: i32 = 46;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_1_SEC: i32 = 47;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_WITHIN_10_SEC: i32 = 48;
pub const NISYNC_VAL_8021AS_CLK_ACCURACY_GREATER_THAN_10_SEC: i32 = 49;
pub const NISYNC_VAL_IRIG_TYPE_IRIGB_DC: i32 = 0;
pub const NISYNC_VAL_IRIG_TYPE_IRIGB_AM: i32 = 1;
pub const NISYNC_VAL_GPS_UNINITIALIZED: i32 = 0;
pub const NISYNC_VAL_GPS_ANTENNA_ERROR: i32 = 1;
pub const NISYNC_VAL_GPS_NO_USEABLE_SATELLITE: i32 = 2;
pub const NISYNC_VAL_GPS_ONE_USEABLE_SATELLITE: i32 = 3;
pub const NISYNC_VAL_GPS_TWO_USEABLE_SATELLITES: i32 = 4;
pub const NISYNC_VAL_GPS_THREE_USEABLE_SATELLITES: i32 = 5;
pub const NISYNC_VAL_GPS_NO_GPS_TIME: i32 = 6;
pub const NISYNC_VAL_GPS_PDOP_TOO_HIGH: i32 = 7;
pub const NISYNC_VAL_GPS_UNUSABLE_SATELLITE: i32 = 8;
pub const NISYNC_VAL_GPS_FIX_REJECTED: i32 = 9;
pub const NISYNC_VAL_GPS_SELF_SURVEY_COMPLETE: i32 = 10;
pub const NISYNC_VAL_GPS_SELF_SURVEY_NOT_COMPLETE: i32 = 11;
pub const NISYNC_VAL_TIMEREF_GPS: i32 = 0;
pub const NISYNC_VAL_TIMEREF_IRIG: i32 = 1;
pub const NISYNC_VAL_TIMEREF_PPS: i32 = 2;
pub const NISYNC_VAL_TIMEREF_1588_ORDINARY_CLOCK: i32 = 3;
pub const NISYNC_VAL_TIMEREF_FREERUNNING: i32 = 4;
pub const NISYNC_VAL_TIMEREF_8021AS: i32 = 5;
pub const NISYNC_VAL_BMCA_MODE_SLAVE_ONLY: i32 = 0;
pub const NISYNC_VAL_BMCA_MODE_MASTER_SLAVE: i32 = 1;
pub const NISYNC_VAL_8021AS_PORT_STATE_DISABLED: i32 = 3;
pub const NISYNC_VAL_8021AS_PORT_STATE_MASTER: i32 = 6;
pub const NISYNC_VAL_8021AS_PORT_STATE_PASSIVE: i32 = 7;
pub const NISYNC_VAL_8021AS_PORT_STATE_SLAVE: i32 = 9;
pub const NISYNC_VAL_1588_TIME_SOURCE_UNKNOWN: i32 = 0;
pub const NISYNC_VAL_1588_TIME_SOURCE_ATOMIC_CLOCK: i32 = 1;
pub const NISYNC_VAL_1588_TIME_SOURCE_GPS: i32 = 2;
pub const NISYNC_VAL_1588_TIME_SOURCE_TERRESTRIAL_RADIO: i32 = 3;
pub const NISYNC_VAL_1588_TIME_SOURCE_PTP: i32 = 4;
pub const NISYNC_VAL_1588_TIME_SOURCE_NTP: i32 = 5;
pub const NISYNC_VAL_1588_TIME_SOURCE_HAND_SET: i32 = 6;
pub const NISYNC_VAL_1588_TIME_SOURCE_OTHER: i32 = 7;
pub const NISYNC_VAL_1588_TIME_SOURCE_INTERNAL_OSCILLATOR: i32 = 8;
pub const NISYNC_VAL_1588_TIME_SOURCE_ALTERNATE_PTP: i32 = 9;
pub const NISYNC_VAL_1588_TIME_SOURCE_RESERVED: i32 = 10;
pub const NISYNC_VAL_EXT_CAL_ABORT: i32 = 0;
pub const NISYNC_VAL_EXT_CAL_COMMIT: i32 = 1;
pub const NISYNC_VAL_GPS_UNUSEABLE_SATELLITE: i32 = 8;
pub const NISYNC_WARN_UNKNOWN_STATUS: i32 = 1073676421;
pub const NISYNC_WARNMSG_CAL_UNCALIBRATED: &'static [u8; 40usize] =
    b"This device is not properly calibrated.\0";
pub const NISYNC_WARNMSG_NETWORK_CLIENT_IN_PROGRESS : & 'static [u8 ; 136usize] = b"The request has been accepted by the remote device but processing has not been completed. Wait and attempt to query the property again.\0" ;
pub const NISYNC_WARNMSG_UNKNOWN_STATUS: &'static [u8; 66usize] =
    b"The status code passed to the operation could not be interpreted.\0";
pub const NISYNC_ERROR_INV_PARAMETER: i32 = -1073807240;
pub const NISYNC_ERROR_NSUP_ATTR: i32 = -1073807331;
pub const NISYNC_ERROR_NSUP_ATTR_STATE: i32 = -1073807330;
pub const NISYNC_ERROR_ATTR_READONLY: i32 = -1073807329;
pub const NISYNC_ERROR_ALLOCATION_FAILED: i32 = -1073807300;
pub const NISYNC_ERROR_SYSTEM_ERROR: i32 = -1073807360;
pub const NISYNC_ERROR_INV_OBJECT: i32 = -1073807346;
pub const NISYNC_ERROR_RSRC_NFOUND: i32 = -1073807343;
pub const NISYNC_ERROR_NIMPL_OPER: i32 = -1073807231;
pub const NISYNC_ERROR_DEST_TERMINAL_IN_USE: i32 = -1073807294;
pub const NISYNC_ERRMSG_INV_PARAMETER: &'static [u8; 43usize] =
    b"A parameter for this operation is invalid.\0";
pub const NISYNC_ERRMSG_NSUP_ATTR: &'static [u8; 42usize] =
    b"The specified attribute is not supported.\0";
pub const NISYNC_ERRMSG_NSUP_ATTR_STATE: &'static [u8; 48usize] =
    b"The specified attribute state is not supported.\0";
pub const NISYNC_ERRMSG_ATTR_READONLY: &'static [u8; 38usize] =
    b"The specified attribute is read-only.\0";
pub const NISYNC_ERRMSG_ALLOCATION_FAILED: &'static [u8; 70usize] =
    b"Insufficient system resources to perform necessary memory allocation.\0";
pub const NISYNC_ERRMSG_SYSTEM_ERROR: &'static [u8; 44usize] =
    b"Unknown system error (miscellaneous error).\0";
pub const NISYNC_ERRMSG_INV_OBJECT: &'static [u8; 50usize] =
    b"The given session or object reference is invalid.\0";
pub const NISYNC_ERRMSG_RSRC_NFOUND: &'static [u8; 90usize] =
    b"Insufficient location information or the device or resource is not present in the system.\0";
pub const NISYNC_ERRMSG_NIMPL_OPER: &'static [u8; 40usize] =
    b"The given operation is not implemented.\0";
pub const NISYNC_ERRMSG_INVALID_DESCRIPTOR: &'static [u8; 48usize] =
    b"The specified instrument descriptor is invalid.\0";
pub const NISYNC_ERRMSG_INVALID_MODE: &'static [u8; 40usize] =
    b"The mode for this operation is invalid.\0";
pub const NISYNC_ERRMSG_FEATURE_NOT_SUPPORTED: &'static [u8; 57usize] =
    b"This operation requires a feature that is not supported.\0";
pub const NISYNC_ERRMSG_VERSION_MISMATCH: &'static [u8; 29usize] =
    b"There is a version mismatch.\0";
pub const NISYNC_ERRMSG_INTERNAL_SOFTWARE: &'static [u8; 37usize] =
    b"An internal software error occurred.\0";
pub const NISYNC_ERRMSG_FILE_IO: &'static [u8; 51usize] =
    b"An error occurred while reading or writing a file.\0";
pub const NISYNC_ERRMSG_RESET_NOT_SUPPORTED: &'static [u8; 36usize] =
    b"This device does not support Reset.\0";
pub const NISYNC_ERRMSG_INVALID_TYPE: &'static [u8; 54usize] =
    b"A parameter for this operation is of an invalid type.\0";
pub const NISYNC_ERRMSG_API_SUPPORT_INCOMPATIBLE_WITH_RUNTIME : & 'static [u8 ; 129usize] = b"The NI-Sync API Support is unable to communicate with the NI-Sync Runtime. To resolve this issue, install NI-Sync 18.0 or later.\0" ;
pub const NISYNC_ERRMSG_DRIVER_INITIALIZATION: &'static [u8; 49usize] =
    b"An error occurred while initializing the driver.\0";
pub const NISYNC_ERRMSG_DRIVER_TIMEOUT: &'static [u8; 52usize] =
    b"The driver timed out while performing an operation.\0";
pub const NISYNC_ERRMSG_READ_FAILURE: &'static [u8; 50usize] =
    b"A failure occurred while reading from the device.\0";
pub const NISYNC_ERRMSG_WRITE_FAILURE: &'static [u8; 48usize] =
    b"A failure occurred while writing to the device.\0";
pub const NISYNC_ERRMSG_DEVICE_NOT_FOUND: &'static [u8; 36usize] =
    b"The specified device was not found.\0";
pub const NISYNC_ERRMSG_DEVICE_NOT_READY: &'static [u8; 35usize] =
    b"The specified device is not ready.\0";
pub const NISYNC_ERRMSG_INTERNAL_HARDWARE: &'static [u8; 37usize] =
    b"An internal hardware error occurred.\0";
pub const NISYNC_ERRMSG_OVERFLOW: &'static [u8; 32usize] = b"An overflow condition occurred.\0";
pub const NISYNC_ERRMSG_REMOTE_DEVICE: &'static [u8; 74usize] =
    b"The specified device is a remote device.  Remote devices are not allowed.\0";
pub const NISYNC_ERRMSG_FIRMWARE_LOAD: &'static [u8; 29usize] = b"The firmware failed to load.\0";
pub const NISYNC_ERRMSG_DEVICE_NOT_INITIALIZED: &'static [u8; 31usize] =
    b"The device is not initialized.\0";
pub const NISYNC_ERRMSG_CLK10_NOT_PRESENT: &'static [u8; 26usize] = b"PXI_Clk10 is not present.\0";
pub const NISYNC_ERRMSG_PLL_NOT_PRESENT: &'static [u8; 36usize] =
    b"This device does not support a PLL.\0";
pub const NISYNC_ERRMSG_DDS_NOT_PRESENT: &'static [u8; 35usize] =
    b"The device does not support a DDS.\0";
pub const NISYNC_ERRMSG_DDS_ALREADY_STARTED: &'static [u8; 74usize] =
    b"The specified attribute cannot be set because the DDS is already running.\0";
pub const NISYNC_ERRMSG_DDS_SYNC_CLK_COMBO_INVALID : & 'static [u8 ; 113usize] = b"The current DDS frequency is incompatible as a synchronization clock, either the DDS is off or running too fast.\0" ;
pub const NISYNC_ERRMSG_DEST_TERMINAL_IN_USE: &'static [u8; 46usize] =
    b"The specified destination terminal is in use.\0";
pub const NISYNC_ERRMSG_SRC_TERMINAL_INVALID: &'static [u8; 61usize] =
    b"The specified source terminal is invalid for this operation.\0";
pub const NISYNC_ERRMSG_DEST_TERMINAL_INVALID: &'static [u8; 66usize] =
    b"The specified destination terminal is invalid for this operation.\0";
pub const NISYNC_ERRMSG_TERMINAL_NOT_CONNECTED: &'static [u8; 41usize] =
    b"The specified terminal is not connected.\0";
pub const NISYNC_ERRMSG_SYNC_CLK_INVALID: &'static [u8; 67usize] =
    b"The specified synchronization clock is invalid for this operation.\0";
pub const NISYNC_ERRMSG_TERMINAL_INVALID: &'static [u8; 36usize] =
    b"Terminal for the device is invalid.\0";
pub const NISYNC_ERRMSG_SRC_TERMINAL_PXI_CHASSIS_NOT_IDENTIFIED : & 'static [u8 ; 209usize] = b"Route failed because the PXI chassis is not identified. The existence of the source terminal depends on the chassis being identified. Use the Measurements & Automation Explorer (MAX) to identify your chassis.\0" ;
pub const NISYNC_ERRMSG_DEST_TERMINAL_PXI_CHASSIS_NOT_IDENTIFIED : & 'static [u8 ; 214usize] = b"Route failed because the PXI chassis is not identified. The existence of the destination terminal depends on the chassis being identified. Use the Measurements & Automation Explorer (MAX) to identify your chassis.\0" ;
pub const NISYNC_ERRMSG_SRC_TERMINAL_PXI_STARX_NOT_IN_SYS_TIMING_SLOT : & 'static [u8 ; 150usize] = b"PXI_Star<n> is available as a source terminal only for devices in a system timing slot. To use PXI_Star<n>, move your device to a system timing slot.\0" ;
pub const NISYNC_ERRMSG_DEST_TERMINAL_PXI_STARX_NOT_IN_SYS_TIMING_SLOT : & 'static [u8 ; 155usize] = b"PXI_Star<n> is available as a destination terminal only for devices in a system timing slot. To use PXI_Star<n>, move your device to a system timing slot.\0" ;
pub const NISYNC_ERRMSG_DEST_TERMINAL_PXI_CLK10_IN_NOT_IN_SYS_TIMING_SLOT : & 'static [u8 ; 136usize] = b"PXI_Clk10_In is available as a destination terminal only for devices in a system timing slot. Move your device to a system timing slot.\0" ;
pub const NISYNC_ERRMSG_CAL_INCORRECT_PASSWORD: &'static [u8; 57usize] =
    b"The supplied external calibration password is incorrect.\0";
pub const NISYNC_ERRMSG_CAL_PASSWORD_TOO_LARGE: &'static [u8; 64usize] =
    b"The external calibration password contains too many characters.\0";
pub const NISYNC_ERRMSG_CAL_NOT_PERMITTED: &'static [u8; 75usize] =
    b"The specified calibration operation is not permitted on this session type.\0";
pub const NISYNC_ERRMSG_RSRC_UNAVAILABLE : & 'static [u8 ; 121usize] = b"A resource necessary to complete the specified operation is not available; therefore, the operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_RSRC_RESERVED : & 'static [u8 ; 169usize] = b"A resource necessary to complete the specified operation is already reserved by a previous operation and cannot be shared; therefore, the operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_RSRC_NOT_RESERVED : & 'static [u8 ; 148usize] = b"A resource necessary to complete the specified operation is not reserved and should have already been; therefore, the operation cannot be completed\0" ;
pub const NISYNC_ERRMSG_HW_BUFFER_FULL : & 'static [u8 ; 132usize] = b"A hardware buffer necessary to complete the specified operation is unexpectedly full; therefore, the operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_SW_BUFFER_FULL : & 'static [u8 ; 132usize] = b"A software buffer necessary to complete the specified operation is unexpectedly full; therefore, the operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_SOCKET_FAILURE : & 'static [u8 ; 134usize] = b"A network socket necessary to complete the specified operation has generated a failure; therefore, the operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_SESSION_ABORTED : & 'static [u8 ; 244usize] = b"The specified operation cannot be performed because a session has been aborted or a device has been removed from the system. Handle this situation as required by the application and then, if appropriate, attempt to perform the operation again.\0" ;
pub const NISYNC_ERRMSG_SESSION_ABORTING : & 'static [u8 ; 249usize] = b"The specified operation cannot be performed because a session is in the process of being aborted or a device is in the process of being removed from the system. Wait until the abort operation is complete, and attempt to perform the operation again.\0" ;
pub const NISYNC_ERRMSG_TERMINAL_NOT_SPECIFIED: &'static [u8; 85usize] =
    b"The specified operation cannot be performed since the Active Item was not specified.\0";
pub const NISYNC_ERRMSG_TIME_OVERFLOW: &'static [u8; 72usize] =
    b"A 1588 time value has overflowed.  The resulting value is not accurate.\0";
pub const NISYNC_ERRMSG_TIME_TOO_EARLY: &'static [u8; 78usize] =
    b"The specified time value is too early to be represented as a 1588 time value.\0";
pub const NISYNC_ERRMSG_TIME_TOO_LATE: &'static [u8; 77usize] =
    b"The specified time value is too late to be represetned as a 1588 time value.\0";
pub const NISYNC_ERRMSG_PTP_ALREADY_STARTED : & 'static [u8 ; 114usize] = b"The Precision Time Protocol (PTP) has already been started on this device; therefore, it cannot be started again.\0" ;
pub const NISYNC_ERRMSG_PTP_NOT_STARTED : & 'static [u8 ; 104usize] = b"The Precision Time Protocol (PTP) has not been started on this device; therefore, it cannot be stopped.\0" ;
pub const NISYNC_ERRMSG_INVALID_CLOCK_STATE : & 'static [u8 ; 102usize] = b"The specified attribute cannot be set when the Precision Time Protocol (PTP) is in its current state.\0" ;
pub const NISYNC_ERRMSG_IP_ADDRESS : & 'static [u8 ; 118usize] = b"The IP address for the specified device cannot be determined; therefore, the specified operation cannot be completed.\0" ;
pub const NISYNC_ERRMSG_FUTURE_TIME_EVENT_TOO_SOON : & 'static [u8 ; 143usize] = b"The time for the specified future time event is too soon, or may be in the past, and cannot be programmed in the device before it would occur.\0" ;
pub const NISYNC_ERRMSG_CLOCK_PERIOD_TOO_SHORT: &'static [u8; 78usize] =
    b"A clock with the specified period is too short to be generated by the device.\0";
pub const NISYNC_ERRMSG_DUP_FUTURE_TIME_EVENT : & 'static [u8 ; 204usize] = b"A future time event with the same time and same terminal as the specified future time event has already been created.  Multiple future time events on the same terminal at the same time cannot be created.\0" ;
pub const NISYNC_ERRMSG_SYNC_INTERVAL_MISMACH : & 'static [u8 ; 256usize] = b"The specified sync interval for this 1588 clock is different than the sync interval specified for other 1588 clocks participating in the PTP.  Adjust the sync interval on this 1588 clock or the other 1588 clocks participating in the PTP to the same value.\0" ;
pub const NISYNC_ERRMSG_INVALID_INITIAL_TIME : & 'static [u8 ; 126usize] = b"The specified initial time is invalid.  Initial times must be after 0 hours 1 January 2000 and before 0 hours 1 January 2100.\0" ;
pub const NISYNC_ERRMSG_CLK_ADJ_TOO_LARGE : & 'static [u8 ; 135usize] = b"The specified 1588 clock adjustment offset is too large.  The clock adjustment cannot be more than +1 seconds or less than -1 seconds.\0" ;
pub const NISYNC_ERRMSG_CLOCK_PERIOD_TOO_LARGE: &'static [u8; 78usize] =
    b"A clock with the specified period is too large to be generated by the device.\0";
pub const NISYNC_ERRMSG_NETWORK_ADAPTER_NOT_FOUND : & 'static [u8 ; 153usize] = b"The network interface associated with the device was not found.  Ensure that the associated NIC (network interface controller) is installed and enabled.\0" ;
pub const NISYNC_ERRMSG_NO_COMMON_TRIG_LINE_FOR_ROUTE : & 'static [u8 ; 186usize] = b"There are no shared trigger lines between the two devices which are acceptable to both devices. Consider routing the signal through the I/O connectors of the two devices, if applicable.\0" ;
pub const NISYNC_ERRMSG_TIMESTAMP_DECIMATION_NOT_SUPPORTED: &'static [u8; 51usize] =
    b"This device does not support timestamp decimation.\0";
pub const NISYNC_ERRMSG_TIMESTAMP_DECIMATION_COUNT_TOO_SMALL: &'static [u8; 71usize] =
    b"The timestamp decimation count must be greater than 0 for this device.\0";
pub const NISYNC_ERRMSG_TIMESTAMP_DECIMATION_COUNT_TOO_LARGE: &'static [u8; 71usize] =
    b"The specified timestamp decimation count is too great for this device.\0";
pub const NISYNC_ERRMSG_FUTURE_TIME_EVENT_REARM_TIME_VIOLATION: &'static [u8; 89usize] =
    b"The specified future time event violates the rearm time of the future time event engine.\0";
pub const NISYNC_ERRMSG_TIME_SNAPPED: &'static [u8; 48usize] =
    b"Board time was snapped back during measurement.\0";
pub const NISYNC_ERRMSG_TR_TYPE_MISMATCH : & 'static [u8 ; 96usize] = b"The requested property is not supported by the time reference specified on the Active Terminal.\0" ;
pub const NISYNC_ERRMSG_TR_INSTANCE_NOT_FOUND: &'static [u8; 53usize] =
    b"The requested time reference instance was not found.\0";
pub const NISYNC_ERRMSG_REMOTE_DEVICE_READ_FAILURE : & 'static [u8 ; 103usize] = b"The data received from the remote device could not be interpreted. Try to perform the operation again.\0" ;
pub const NISYNC_ERRMSG_REMOTE_DEVICE_COMMUNICATION_FAILURE : & 'static [u8 ; 102usize] = b"A failure occured while communicating with the remote device. Ensure the remote device is accessible.\0" ;
pub const NISYNC_ERRMSG_LIB_LOAD_FAILURE: &'static [u8; 78usize] =
    b"Unable to load an internal library. If the error persists contact NI support.\0";
pub const NISYNC_ERRMSG_INVALID_RESOURCE_NAME_FORMAT: &'static [u8; 37usize] =
    b"The resource name format is invalid.\0";
pub const NISYNC_ERRMSG_TR_INSTANCE_ALREADY_EXISTS: &'static [u8; 45usize] =
    b"The specified time reference already exists.\0";
pub const NISYNC_ERRMSG_REMOTE_DEVICE_RESOURCE_NOT_FOUND : & 'static [u8 ; 215usize] = b"Requested resource not found on a remote device. This may be because the device was not reachable or has experienced an internal error. It may also mean you need to update software or firmware on the remote device.\0" ;
pub const NISYNC_ERRMSG_CONFLICTING_TR_INSTANCES : & 'static [u8 ; 179usize] = b"The time reference you are trying to enable conflicts with a time reference already running on the same interface. Disable the conflicting time reference and retry the operation.\0" ;
pub const NISYNC_ERRMSG_TR_ATTR_NOT_FOUND : & 'static [u8 ; 144usize] = b"The requested attribute is not currently available. This may be because the time reference is disabled, not ready, or has encountered an error.\0" ;
pub const NISYNC_ERRMSG_COMMUNICATIONS_FAULT : & 'static [u8 ; 157usize] = b"A failure occured while communicating with a required software service running on the device. Restart the device. If the error persists, contact NI support.\0" ;
pub type ViUInt32 = ::std::os::raw::c_uint;
pub type ViInt32 = ::std::os::raw::c_int;
pub type ViUInt16 = ::std::os::raw::c_ushort;
pub type ViInt16 = ::std::os::raw::c_short;
pub type ViChar = ::std::os::raw::c_char;
pub type ViPChar = *mut ViChar;
pub type ViReal64 = f64;
pub type ViString = ViPChar;
pub type ViConstString = *const ViChar;
pub type ViRsrc = ViString;
pub type ViBoolean = ViUInt16;
pub type ViStatus = ViInt32;
pub type ViObject = ViUInt32;
pub type ViSession = ViObject;
pub type ViAttr = ViUInt32;
extern "C" {
    pub fn niSync_init(
        resourceName: ViRsrc,
        IDQuery: ViBoolean,
        resetDevice: ViBoolean,
        vi: *mut ViSession,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_close(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetTimeReferenceNames(
        vi: ViSession,
        bufferSize: ViUInt32,
        timeReferenceNames: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_error_message(
        vi: ViSession,
        errorCode: ViStatus,
        errorMessage: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_reset(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_PersistConfig(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_self_test(
        vi: ViSession,
        selfTestResult: *mut ViInt16,
        selfTestMessage: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_revision_query(
        vi: ViSession,
        instrumentDriverRevision: *mut ViChar,
        firmwareRevision: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ConfigureFPGA(vi: ViSession, fpgaProgramPath: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_ConnectTrigTerminals(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
        syncClock: ViConstString,
        invert: ViInt32,
        updateEdge: ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisconnectTrigTerminals(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetTrigTerminalConnectionInfo(
        vi: ViSession,
        destTerminal: ViConstString,
        srcTerminal: *mut ViChar,
        syncClock: *mut ViChar,
        invert: *mut ViInt32,
        updateEdge: *mut ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ConnectSWTrigToTerminal(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
        syncClock: ViConstString,
        invert: ViInt32,
        updateEdge: ViInt32,
        delay: ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisconnectSWTrigFromTerminal(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetSWTrigConnectionInfo(
        vi: ViSession,
        destTerminal: ViConstString,
        srcTerminal: *mut ViChar,
        syncClk: *mut ViChar,
        invert: *mut ViInt32,
        updateEdge: *mut ViInt32,
        delay: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SendSoftwareTrigger(vi: ViSession, srcTerminal: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_ConnectClkTerminals(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisconnectClkTerminals(
        vi: ViSession,
        srcTerminal: ViConstString,
        destTerminal: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetClkTerminalConnectionInfo(
        vi: ViSession,
        destTerminal: ViConstString,
        srcTerminal: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_MeasureFrequency(
        vi: ViSession,
        srcTerminal: ViConstString,
        duration: ViReal64,
        actualDuration: *mut ViReal64,
        frequency: *mut ViReal64,
        frequencyError: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_MeasureFrequencyEx(
        vi: ViSession,
        srcTerminal: ViConstString,
        duration: ViReal64,
        decimationCount: ViUInt32,
        actualDuration: *mut ViReal64,
        frequency: *mut ViReal64,
        frequencyError: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_Start1588(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_Stop1588(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTime(
        vi: ViSession,
        timeSource: ViInt32,
        timeSeconds: ViUInt32,
        timeNanoseconds: ViUInt32,
        timeFractionalNanoseconds: ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetTime(
        vi: ViSession,
        timeSeconds: *mut ViUInt32,
        timeNanoseconds: *mut ViUInt32,
        timeFractionalNanoseconds: *mut ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ResetFrequency(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_CreateFutureTimeEvent(
        vi: ViSession,
        terminal: ViConstString,
        outputLevel: ViInt32,
        timeSeconds: ViUInt32,
        timeNanoseconds: ViUInt32,
        timeFractionalNanoseconds: ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ClearFutureTimeEvents(vi: ViSession, terminal: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_EnableTimeStampTrigger(
        vi: ViSession,
        terminal: ViConstString,
        activeEdge: ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_EnableTimeStampTriggerWithDecimation(
        vi: ViSession,
        terminal: ViConstString,
        activeEdge: ViInt32,
        decimationCount: ViUInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ReadTriggerTimeStamp(
        vi: ViSession,
        terminal: ViConstString,
        timeout: ViReal64,
        timeSeconds: *mut ViUInt32,
        timeNanoseconds: *mut ViUInt32,
        timeFractionalNanoseconds: *mut ViUInt16,
        detectedEdge: *mut ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ReadMultipleTriggerTimeStamp(
        vi: ViSession,
        terminal: ViConstString,
        timestampsToRead: ViUInt32,
        timeout: ViReal64,
        timeSecondsBuffer: *mut ViUInt32,
        timeNanosecondsBuffer: *mut ViUInt32,
        timeFractionalNanosecondsBuffer: *mut ViUInt16,
        detectedEdgeBuffer: *mut ViInt32,
        timestampsRead: *mut ViUInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisableTimeStampTrigger(vi: ViSession, terminal: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_CreateClock(
        vi: ViSession,
        terminal: ViConstString,
        highTicks: ViUInt32,
        lowTicks: ViUInt32,
        startTimeSeconds: ViUInt32,
        startTimeNanoseconds: ViUInt32,
        startTimeFractionalNanoseconds: ViUInt16,
        stopTimeSeconds: ViUInt32,
        stopTimeNanoseconds: ViUInt32,
        stopTimeFractionalNanoseconds: ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ClearClock(vi: ViSession, terminal: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_Start8021AS(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_Stop8021AS(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReferenceFreeRunning(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReferenceGPS(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReferenceIRIG(
        vi: ViSession,
        irigType: ViInt32,
        terminalName: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReferencePPS(
        vi: ViSession,
        terminalName: ViConstString,
        useManualTime: ViBoolean,
        initialTimeSeconds: ViUInt32,
        initialTimeNanoseconds: ViUInt32,
        initialTimeFractionalNanoseconds: ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReference1588OrdinaryClock(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetTimeReference8021AS(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_EnableGPSTimestamping(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_EnableIRIGTimestamping(
        vi: ViSession,
        irigType: ViInt32,
        terminalName: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ReadLastGPSTimestamp(
        vi: ViSession,
        timestampSeconds: *mut ViUInt32,
        timestampNanoseconds: *mut ViUInt32,
        timestampFractionalNanoseconds: *mut ViUInt16,
        gpsSeconds: *mut ViUInt32,
        gpsNanoseconds: *mut ViUInt32,
        gpsFractionalNanoseconds: *mut ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ReadLastIRIGTimestamp(
        vi: ViSession,
        terminal: ViConstString,
        timestampSeconds: *mut ViUInt32,
        timestampNanoseconds: *mut ViUInt32,
        timestampFractionalNanoseconds: *mut ViUInt16,
        irigbSeconds: *mut ViUInt32,
        irigbNanoseconds: *mut ViUInt32,
        irigbFractionalNanoseconds: *mut ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisableGPSTimestamping(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_DisableIRIGTimestamping(vi: ViSession, terminalName: ViConstString) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetVelocity(
        vi: ViSession,
        eastVelocity: *mut ViReal64,
        northVelocity: *mut ViReal64,
        upVelocity: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetLocation(
        vi: ViSession,
        latitude: *mut ViReal64,
        longitude: *mut ViReal64,
        altitude: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetAttributeViInt32(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: *mut ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetAttributeViReal64(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetAttributeViBoolean(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: *mut ViBoolean,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetAttributeViString(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        bufferSize: ViInt32,
        value: *mut ViChar,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetAttributeViInt32(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetAttributeViReal64(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetAttributeViBoolean(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: ViBoolean,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_SetAttributeViString(
        vi: ViSession,
        activeItem: ViConstString,
        attribute: ViAttr,
        value: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetExtCalLastDateAndTime(
        vi: ViSession,
        year: *mut ViInt32,
        month: *mut ViInt32,
        day: *mut ViInt32,
        hour: *mut ViInt32,
        minute: *mut ViInt32,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetExtCalLastTemp(vi: ViSession, temp: *mut ViReal64) -> ViStatus;
}
extern "C" {
    pub fn niSync_GetExtCalRecommendedInterval(vi: ViSession, months: *mut ViInt32) -> ViStatus;
}
extern "C" {
    pub fn niSync_ChangeExtCalPassword(
        vi: ViSession,
        oldPassword: ViConstString,
        newPassword: ViConstString,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_ReadCurrentTemperature(vi: ViSession, temperature: *mut ViReal64) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalGetOscillatorVoltage(vi: ViSession, voltage: *mut ViReal64) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalGetClk10PhaseVoltage(vi: ViSession, voltage: *mut ViReal64) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalGetDDSStartPulsePhaseVoltage(
        vi: ViSession,
        voltage: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalGetDDSInitialPhase(vi: ViSession, phase: *mut ViReal64) -> ViStatus;
}
extern "C" {
    pub fn niSync_InitExtCal(
        resourceName: ViRsrc,
        password: ViConstString,
        extCalVi: *mut ViSession,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_CloseExtCal(extCalVi: ViSession, action: ViInt32) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalAdjustOscillatorVoltage(
        extCalVi: ViSession,
        measuredVoltage: ViReal64,
        oldVoltage: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalAdjustClk10PhaseVoltage(
        extCalVi: ViSession,
        measuredVoltage: ViReal64,
        oldVoltage: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalAdjustDDSStartPulsePhaseVoltage(
        extCalVi: ViSession,
        measuredVoltage: ViReal64,
        oldVoltage: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_CalAdjustDDSInitialPhase(
        extCalVi: ViSession,
        measuredPhase: ViReal64,
        oldPhase: *mut ViReal64,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_StartPTP(
        vi: ViSession,
        initialTimeSource: ViInt32,
        initialTimeSeconds: ViUInt32,
        initialTimeNanoseconds: ViUInt32,
        initialTimeFractionalNanoseconds: ViUInt16,
    ) -> ViStatus;
}
extern "C" {
    pub fn niSync_StopPTP(vi: ViSession) -> ViStatus;
}
extern "C" {
    pub fn niSync_Get1588Time(
        vi: ViSession,
        timeSeconds: *mut ViUInt32,
        timeNanoseconds: *mut ViUInt32,
        timeFractionalNanoseconds: *mut ViUInt16,
    ) -> ViStatus;
}
